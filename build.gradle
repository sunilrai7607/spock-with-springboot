buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

wrapper {
    distributionUrl = "${gradleWrapperUrl}"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group "${group}"
version "${version}"
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation("org.spockframework:spock-core:${spockVersion}")
    testImplementation("org.spockframework:spock-spring:${spockVersion}")

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {

    afterEvaluate {
    }
    violationRules {
        rule {
            limit {
                //counter = 'LINE'
                //value = 'COVEREDRATION'
                minimum = 0.1
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

sourceSets {
    test {
        groovy {
            srcDirs = ['src/test/unit/groovy']
        }
    }
}

test {
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}
